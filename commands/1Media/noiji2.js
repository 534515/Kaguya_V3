import fs from "fs";
import path from "path";
import axios from "axios";

const userDataFile = path.join(process.cwd(), 'pontsData.json');

// Ensure the existence of the user data file
if (!fs.existsSync(userDataFile)) {
    fs.writeFileSync(userDataFile, '{}');
}

export default {
    name: "ุงูููุฌู",
    author: "kaguya project",
    role: "member",
    description: "ุชุฎููู ุงูุฅูููุฌู ูู ุฎูุงู ุงููุตู",
    execute: async function ({ api, event, Economy }) {
        try {
            const questions = [
                { question: "ุฑุฌู ุดุฑุทู", answer: "๐ฎโโ๏ธ" },
                { question: "ุงูุฑู ุดุฑุทู", answer: "๐ฎโโ๏ธ" },
                { question: "ุญุฒูู", answer: "๐ข" }, 
                { question: "ุงูุงูุฑูู ุดุจู ูุจุชุณู", answer: "๐" },
                { question: "ูุฎุฑุฌ ูุณุงูู", answer: "๐" }, 
                { question: "ููุณ ูู ูู", answer: "๐ถ" },
                { question: "ูุชุซุงุฆุจ", answer: "๐ฅฑ" },
                { question: "ูุงุฆู", answer: "๐ด" },
                { question: "ูุฎุฑุฌ ูุณุงูู ููุบูุถ ุนูู ูุงุฌุฏู", answer: "๐" }, 
                { question: "ูุฎุฑุฌ ูุณุงูู ูุนููุงู ูุบูุถู", answer: "๐" },
                { question: "ูุงู", answer: "๐ฎ" },
                { question: "ูุบูู ููู", answer: "๐ค" },
                { question: "ููููุจ ุฑุงุณู", answer: "๐" }, 
                { question: "ูููุฌุฑ ุฑุฆุณู", answer: "๐คฏ" },
                { question: "ูุดุนุฑ ุจู ุญุฑ", answer: "๐ฅต" }, { question: "ุจุงููู", answer: "๐" },
                { question: "ุนููู", answer: "๐" }, 
                { question: "ูุงุนุฒ", answer: "๐" },
                { question: "ุงูุณุงุนุฉ ุงูุซุงููู ุนุดุฑ", answer: "๐" },
                { question: "ูุฑู ูุฏู", answer: "โฝ" }, { question: "ุณูู ุชุณูู", answer: "๐" },
                { question: "ุฏุฑุงุฌู ููุงุฆูู", answer: "๐ฒ" },
                { question: "ุฌุฏู", answer: "๐" },
                { question: "ุถูุฏุน", answer: "๐ธ" },
                { question: "ุจูุช", answer: "๐ค" },
                { question: "ูุจูุฉ", answer: "๐" },
                { question: "ูุชู ููุณู ุฑุฃุณู ุจูุฏูู", answer: "๐" },
                { question: "ูุฌูุฉ ุจุฑุงูุฉ", answer: "๐" },
                { question: "ุนูููู ุชุฑุงูุจุงู ุจุตูุช", answer: "๐" },
                { question: "ุงููุฌุฏุฉ!", answer: "๐" },
                { question: "ุชุงุจูุช", answer: "โฐ๏ธ" },
                { question: "ูุฌู ูุถุงุฆู", answer: "๐ฝ" },
                { question: "ูููุฉ ุ ุนูู ุ ุฒุฑูุงุก", answer: "๐งฟ" },
                { question:"ุญุงุณูุจ", answer: "๐ป" },
                { question: "ูุดุจู ุงููุฑู", answer: "๐" },
                { question: "ุณูู ุงูุฃุฒุฑู ุงูุณุญุฑู ุงูุจุฑุงู", answer: "๐ก๏ธ" },
                { question: "ุฌุฏุงุฑ ุฃุญูุฑ ูุจูู ูู ุงูุทูุจ", answer: "๐งฑ" },
                { question: "ูุบูุงุทูุณ", answer: "๐งฒ" },
                { question: "ุฒูุฑุฉ ุงูุณุงููุฑุง", answer: "๐ฎ" },
                { question: "ุดุจูุฉ ูุฑุฉ ุงููุฏู", answer: "๐ฅ" },
                { question: "ูุงุณุฉ", answer: "๐" },
                { question: "ุฃุญูุฑ ุงูุดูุงู", answer: "๐" },
                { question: "ูุฑู ุงูุญูุงู", answer: "๐งป" },
                { question: "ููุฏุงููุฉ ุงููุฑูุฒ ุงูุฃูู", answer: "๐ฅ" },
                // ุงูุฃุณุฆูุฉ ุงูุฃุฎุฑู ููุง
            ];

            const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
            const correctAnswer = randomQuestion.answer;

            const message = `โฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑ\n\t๐ | ุฃุฑุณู ุงูุฅูููุฌู ุงูุตุญูุญ ุญุณุจ ุงููุตู ุงูุชุงูู :\n${randomQuestion.question}`;

            api.sendMessage(message, event.threadID, async (error, info) => {
                if (!error) {
                    try {
                        await Economy.getBalance(event.senderID); // ุงูุชุญูู ูู ูุฌูุฏ ูุนูููุงุช ุงูุงูุชุตุงุฏ ูููุณุชุฎุฏู
                        client.handler.reply.set(info.messageID, {
                            author: event.senderID,
                            type: "reply", // ุชุญุฏูุฏ ููุน ุงูุฑุฏ
                            name: "ุงูููุฌู",
                            correctAnswer: correctAnswer, // ุฅุถุงูุฉ ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ
                            unsend: true
                        });
                    } catch (e) {
                        console.error("ุฎุทุฃ ูู ุงูุชุญูู ูู ูุนูููุงุช ุงูุงูุชุตุงุฏ ูููุณุชุฎุฏู:", e);
                    }
                } else {
                    console.error("ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ:", error);
                }
            });
        } catch (error) {
            console.error("ุฎุทุฃ ูู ุชูููุฐ ุงูุฃูุฑ:", error);
        }
    },
    onReply: async function ({ api, event, reply, Economy }) {
        try {
            if (reply && reply.type === "reply" && reply.name === "ุงูููุฌู") {
                const userAnswer = event.body.trim().toLowerCase();
                const correctAnswer = reply.correctAnswer && reply.correctAnswer.toLowerCase();

                if (correctAnswer) {
                    const userInfo = await api.getUserInfo(event.senderID);
                    const userName = userInfo ? userInfo[event.senderID].name : "ุงููุณุชุฎุฏู";

                    if (userAnswer === correctAnswer) {
                        const pointsData = JSON.parse(fs.readFileSync(userDataFile, "utf8"));
                        const userPoints = pointsData[event.senderID] || { name: userName, points: 0 };
                        userPoints.points += 50;
                        pointsData[event.senderID] = userPoints;
                        fs.writeFileSync(userDataFile, JSON.stringify(pointsData, null, 2));

                        api.sendMessage(`โ | ุชูุงูููุง ูุง ${userName} ๐ฅณ ุฅุฌุงุจุชู ุตุญูุญุฉุ ูุญุตูุช ุจุฐูู ุนูู 50 ููุทุฉ`, event.threadID);
                   
                api.setMessageReaction("โ", event.messageID, (err) => {}, true);        
                        api.unsendMessage(reply.messageID);
                    } else {
                        api.sendMessage(`โ | ุขุณูุฉ ุฅุฌุงุจุชู ุฎุงุทุฆุฉ`, event.threadID);

api.setMessageReaction("โ", event.messageID, (err) => {}, true);
                        
                    }
                } else {
                   console.error("ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ุบูุฑ ูุนุฑููุฉ");
                }
            } else {
                console.error("ุฑุฏ ุบูุฑ ูุนุฑูู");
            }
        } catch (error) {
            console.error("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุฏ:", error);
        }
    }
};