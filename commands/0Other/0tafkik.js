import fs from "fs";
import path from "path";
import axios from "axios";

const userDataFile = path.join(process.cwd(), 'pontsData.json');

// Ensure the existence of the user data file
if (!fs.existsSync(userDataFile)) {
    fs.writeFileSync(userDataFile, '{}');
}

export default {
    name: "ุชูููู",
    author: "kaguya project",
    role: "member",
    description: "ุชูููู ุงููููุงุช ูุงูููุฒ ุจุงูููุงุท",
    execute: async function ({ api, event, Economy }) {
        try {
            const questions = [
                  { question: "ุจูุช", answer: "ุจ ู ุช" },
  { question: "ุฑุฌู", "answer": "ุฑ ุฌ ู" },
  { question: "ุงูุฑุฃุฉ", answer: "ุง ู ุฑ ุฃ ุฉ" },
  { question: "ููุฏ", answer: "ู ู ุฏ" },
  { question: "ูุชุงุฉ", answer: "ู ุช ุง ุฉ" },
  { question: "ูุงุก", answer: "ู ุง ุก" },
  { question: "ูุงุฑ", answer: "ู ุง ุฑ" },
  { question: "ุดูุณ", answer: "ุด ู ุณ" },
  { question: "ููุฑ", answer: "ู ู ุฑ" },
  { question: "ููู", answer: "ู ู ู" },
  { question: "ููุงุฑ", answer: "ู ู ุง ุฑ" },
  { question: "ุฌุจู", answer: "ุฌ ุจ ู" },
  { question: "ุณูู", answer: "ุณ ู ู" },
  {question: "ุดุฌุฑุฉ", answer: "ุด ุฌ ุฑ ุฉ" },
  { question: "ุฒูุฑุฉ", answer: "ุฒ ู ุฑ ุฉ" },
  { question: "ุทูุฑ", answer: "ุท ู ุฑ" },
  { question: "ุฃุณุฏ", answer: "ุฃ ุณ ุฏ" },
  { question: "ุฐุฆุจ", answer: "ุฐ ุฆ ุจ" },
  { question: "ุฌูู", answer: "ุฌ ู ู" },
  { question: "ุจูุฑ", answer: "ุจ ู ุฑ" },
  { question: "ุบูู", answer: "ุบ ู ู" },
  { question: "ูุชุงุจ", answer: "ู ุช ุง ุจ" },
  { question: "ููู", answer: "ู ู ู" },
  { question: "ูุฑูุฉ", answer: "ู ุฑ ู ุฉ" },
  { question: "ููุฒู", answer: "ู ู ุฒ ู" },
  { question: "ูุฏุฑุณุฉ", answer: "ู ุฏ ุฑ ุณ ุฉ" },
  { question: "ูุณุชุดูู", answer: "ู ุณ ุช ุด ู ู" },
  { question: "ูุชุฌุฑ", answer: "ู ุช ุฌ ุฑ" },
  { question: "ูุทุนู", answer: "ู ุท ุน ู" },
  { question: "ุณูุงุฑุฉ", answer: "ุณ ู ุฃ ุฑ ุฉ" },
  { question: "ุฏุฑุงุฌุฉ", answer: "ุฏ ุฑ ุง ุฌ ุฉ" },
  { question: "ุทุงุฆุฑุฉ", answer: "ุท ุง ุฆ ุฑ ุฉ" },
  { question: "ูุทุงุฑ", answer: "ู ุท ุง ุฑ" },
  { question: "ุณูููุฉ", answer: "ุณ ู ู ู ุฉ" },
                { question: "ููุจ", answer: "ู ู ุจ" },
                { question: "ุบุงุจุฉ", answer: "ุบ ุง ุจ ุฉ" },{ question: "ุนููุงู", answer: "ุน ู ู ุง ู" },{ question: "ุฌุฒูุฑุฉ", answer: "ุฌ ุฒ ู ุฑ ุฉ" },{ question: "ุฎูุงู", answer: "ุฎ ู ุง ู" },{ question: "ูุฃุณูููุงูููู", answer: "ู ุฃ ุณ ู ู ู ุง ู ู ู ู" },{ question: "ููุงู", answer: "ู ู ุง ู" },{ question: "ุนูู", answer: "ุน ู ู" },{ question: "ุทูุณ", answer: "ุท ู ุณ" },{ question: "ุจุฎุงุฑ", answer: "ุจ ุฎ ุง ุฑ" },{ question: "ุงูุญูุช ุงูุงุฒุฑู", answer: "ุง ู ุญ ู ุช ุง ู ุง ุฒ ุฑ ู" },


                // ุงูุฃุณุฆูุฉ ุงูุฃุฎุฑู ููุง
            ];

            const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
            const correctAnswer = randomQuestion.answer;

            const message = `โฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑ\n\t๐ | ูู ุจุชูููู ุงููููุงุช ุงูุชุงููุฉ :\n\t\t\t\t[${randomQuestion.question}]\nโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑโฑ`;

            api.sendMessage(message, event.threadID, async (error, info) => {
                if (!error) {
                    try {
                        await Economy.getBalance(event.senderID); // ุงูุชุญูู ูู ูุฌูุฏ ูุนูููุงุช ุงูุงูุชุตุงุฏ ูููุณุชุฎุฏู
                        client.handler.reply.set(info.messageID, {
                            author: event.senderID,
                            type: "reply", // ุชุญุฏูุฏ ููุน ุงูุฑุฏ
                            name: "ุชูููู",
                            correctAnswer: correctAnswer, // ุฅุถุงูุฉ ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ
                            unsend: true
                        });
                    } catch (e) {
                        console.error("ุฎุทุฃ ูู ุงูุชุญูู ูู ูุนูููุงุช ุงูุงูุชุตุงุฏ ูููุณุชุฎุฏู:", e);
                    }
                } else {
                    console.error("ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ:", error);
                }
            });
        } catch (error) {
            console.error("ุฎุทุฃ ูู ุชูููุฐ ุงูุฃูุฑ:", error);
        }
    },
    onReply: async function ({ api, event, reply, Economy }) {
        try {
            if (reply && reply.type === "reply" && reply.name === "ุชูููู") {
                const userAnswer = event.body.trim().toLowerCase();
                const correctAnswer = reply.correctAnswer && reply.correctAnswer.toLowerCase();

                if (correctAnswer) {
                    const userInfo = await api.getUserInfo(event.senderID);
                    const userName = userInfo ? userInfo[event.senderID].name : "ุงููุณุชุฎุฏู";

                    if (userAnswer === correctAnswer) {
                        const pointsData = JSON.parse(fs.readFileSync(userDataFile, "utf8"));
                        const userPoints = pointsData[event.senderID] || { name: userName, points: 0 };
                        userPoints.points += 50;
                        pointsData[event.senderID] = userPoints;
                        fs.writeFileSync(userDataFile, JSON.stringify(pointsData, null, 2));

                        api.sendMessage(`โ | ุชูุงูููุง ูุง ${userName} ๐ฅณ ุฅุฌุงุจุชู ุตุญูุญุฉุ ูุญุตูุช ุจุฐูู ุนูู 50 ููุทุฉ`, event.threadID);

                        api.setMessageReaction("โ", event.messageID, (err) => {}, true);
                        api.unsendMessage(reply.messageID);
                    } else {
                        api.sendMessage(`โ | ุขุณูุฉ ุฅุฌุงุจุชู ุฎุงุทุฆุฉ`, event.threadID);

api.setMessageReaction("โ", event.messageID, (err) => {}, true);
                        
                    }
                } else {
                    console.error("ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ุบูุฑ ูุนุฑููุฉ");
                }
            } else {
                console.error("ุฑุฏ ุบูุฑ ูุนุฑูู");
            }
        } catch (error) {
            console.error("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุฏ:", error);
        }
    }
};